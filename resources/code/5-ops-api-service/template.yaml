AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS Speech AI Workshop for Utilities / Backoffice Services / Operations API Service.
  This service exposes a hypermedia API for insights into what happens in the processing pipeline.

# ---------------------------------------------------------------------------------------------------------------------
# Parameters.
# ---------------------------------------------------------------------------------------------------------------------

Parameters:

  # Standard parameters that should go into every service.

  Stage:
    Description: "Environment stage (dev, test, ..., prod)"
    Type: "String"
    Default: "dev"
  Workload:
    Description: "Short name of the overall workload this service belongs to"
    Type: "String"
    Default: "eecc"
  Context:
    Description: "Short name of the context for this service (e.g. backoffice services versus business services)"
    Type: "String"
    Default: "boff"
  Service:
    Description: "Short name of this service"
    Type: "String"
    Default: "opap"
  WorkloadLongName:
    Description: "Long name of the overall workload this service belongs to"
    Type: "String"
    Default: "elfish-electrons-customer-care"
  ContextLongName:
    Description: "Long name of the context for this service (e.g. backoffice services versus business services)"
    Type: "String"
    Default: "backoffice-services"
  ServiceLongName:
    Description: "Long name of this service"
    Type: "String"
    Default: "operations-api-service"
  LogLevel:
    Description: "Log level for Lambda functions"
    Type: "String"
    Default: "DEBUG"
  LogRetentionInDays:
    Description: "CloudWatch Logs retention period"
    Type: "Number"
    Default: 7

  # Parameters specific to this service.

  # TranscribeCallRecordingFunctionName:
  #   Description: "Name suffix for the TranscribeCallRecordingFunction"
  #   Type: "String"
  #   Default: "transcribe-call-recording"

  # Parameters from AWS SSM Parameter Store for shared resources.

  ContactCenterDataBucketArn:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "ARN of the shared ContactCenterDataBucket"
    Default: "/dev/eecc/s3/cc-data/arn"
  ContactCenterDataBucketName:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "Name of the shared ContactCenterDataBucket"
    Default: "/dev/eecc/s3/cc-data/name"

  DataLakeRawDataBucketArn:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "ARN of the shared DataLakeRawDataBucket"
    Default: "/dev/eecc/s3/dl-raw-data/arn"
  DataLakeRawDataBucketName:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "Name of the shared DataLakeRawDataBucket"
    Default: "/dev/eecc/s3/dl-raw-data/name"

  DataLakePreparedDataBucketArn:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "ARN of the shared DataLakePreparedDataBucket"
    Default: "/dev/eecc/s3/dl-prepared-data/arn"
  DataLakePreparedDataBucketName:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "Name of the shared DataLakePreparedDataBucket"
    Default: "/dev/eecc/s3/dl-prepared-data/name"

  DataLakeConsumableDataBucketArn:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "ARN of the shared DataLakeConsumableDataBucket"
    Default: "/dev/eecc/s3/dl-consumable-data/arn"
  DataLakeConsumableDataBucketName:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "Name of the shared DataLakeConsumableDataBucket"
    Default: "/dev/eecc/s3/dl-consumable-data/name"

# ---------------------------------------------------------------------------------------------------------------------
# Mappings.
# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------
# Globals.
# ---------------------------------------------------------------------------------------------------------------------

Globals:

  # Globals for serverless functions.

  Function:
    Runtime: "python3.8"
    Timeout: 5
    Tracing: "Active"
    MemorySize: 512
    Environment:
      Variables:
        STAGE:              !Ref "Stage"
        WORKLOAD:           !Ref "Workload"
        CONTEXT:            !Ref "Context"
        SERVICE:            !Ref "Service"
        WORKLOAD_LONG_NAME: !Ref "WorkloadLongName"
        CONTEXT_LONG_NAME:  !Ref "ContextLongName"
        SERVICE_LONG_NAME:  !Ref "ServiceLongName"
        LOG_LEVEL:          !Ref "LogLevel"
        CC_DATA_BUCKET_ARN:             !Ref "ContactCenterDataBucketArn"
        CC_DATA_BUCKET_NAME:            !Ref "ContactCenterDataBucketName"
        DL_RAW_DATA_BUCKET_ARN:         !Ref "DataLakeRawDataBucketArn"
        DL_RAW_DATA_BUCKET_NAME:        !Ref "DataLakeRawDataBucketName"
        DL_PREPARED_DATA_BUCKET_ARN:    !Ref "DataLakePreparedDataBucketArn"
        DL_PREPARED_DATA_BUCKET_NAME:   !Ref "DataLakePreparedDataBucketName"
        DL_CONSUMABLE_DATA_BUCKET_ARN:  !Ref "DataLakeConsumableDataBucketArn"
        DL_CONSUMABLE_DATA_BUCKET_NAME: !Ref "DataLakeConsumableDataBucketName"
    # Tags coming in from sam deploy command.

# ---------------------------------------------------------------------------------------------------------------------
# Resources.
# ---------------------------------------------------------------------------------------------------------------------

Resources:

  # -------------------------------------------------------------------------------------------------------------------
  # API management resources.
  # -------------------------------------------------------------------------------------------------------------------

  OpsApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      #LogGroupName: !Sub "${Stage}-${Workload}-${Service}-rest-api"
      RetentionInDays: !Ref "LogRetentionInDays"

  OpsApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt "OpsApiLogGroup.Arn"
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency}'
      # Auth: ApiAuth
      # BinaryMediaTypes: List
      # CacheClusterEnabled: Boolean
      # CacheClusterSize: String
      # CanarySetting: CanarySetting
      # Cors: String | CorsConfiguration
      # DefinitionBody: String
      # DefinitionUri: String | ApiDefinition
      Description: "API for the Ops API Service"
      # Domain: DomainConfiguration
      # EndpointConfiguration: EndpointConfiguration
      # GatewayResponses: Map
      MethodSettings:
          # This is the "Log full requests/responses data" check box in the management console.
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: "INFO"
          MetricsEnabled: true
          ResourcePath: "/*"
      # MinimumCompressionSize: Integer
      # Models: Map
      Name: "Ops Api"
      # OpenApiVersion: String
      StageName: !Ref "Stage"
      # Tags coming in from sam deploy command.
      TracingEnabled: true
      # Variables: Map

  # -------------------------------------------------------------------------------------------------------------------
  # User API resources.
  # -------------------------------------------------------------------------------------------------------------------

  UserApiRetrieveApiHomeDocFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: "src/"
      Handler: "user_api_retrieve_api_homedoc.lambda_handler"
      Environment:
      Events:
        UserApiRetrieveApiHomeDocEvent:
          Type: Api
          Properties:
            Path: "/api/user"
            Method: get
            RestApiId:
              Ref: "OpsApi"

  # FIXME: Add log group resources for _all_ Lambda functions.

  UserApiRetrieveApiHomeDocFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${UserApiRetrieveApiHomeDocFunction}"
      RetentionInDays: !Ref "LogRetentionInDays"
      # Tags are not supported for AWS::Logs::LogGroup.

  UserApiRetrieveCcCallRecordingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: "src/"
      Handler: "user_api_retrieve_cc_call_recordings.lambda_handler"
      Environment:
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref "ContactCenterDataBucketName"
      Events:
        UserApiRetrieveCcCallRecordingsEvent:
          Type: Api
          Properties:
            Path: "/api/user/cc/call-recordings"
            Method: get
            RestApiId:
              Ref: "OpsApi"

  UserApiRetrieveDlCallRecordingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: "src/"
      Handler: "user_api_retrieve_dl_call_recordings.lambda_handler"
      Environment:
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref "DataLakeRawDataBucketName"
      Events:
        UserApiRetrieveDlCallRecordingsEvent:
          Type: Api
          Properties:
            Path: "/api/user/dl/call-recordings"
            Method: get
            RestApiId:
              Ref: "OpsApi"

  UserApiRetrieveDlCallTranscriptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: "src/"
      Handler: "user_api_retrieve_dl_call_transcriptions.lambda_handler"
      Environment:
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref "DataLakePreparedDataBucketName"
      Events:
        UserApiRetrieveDlCallTranscriptionsEvent:
          Type: Api
          Properties:
            Path: "/api/user/dl/call-transcriptions"
            Method: get
            RestApiId:
              Ref: "OpsApi"

  UserApiRetrieveDlCallComprehensionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: "src/"
      Handler: "user_api_retrieve_dl_call_comprehensions.lambda_handler"
      Environment:
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref "DataLakeConsumableDataBucketName"
      Events:
        UserApiRetrieveDlCallComprehensionsEvent:
          Type: Api
          Properties:
            Path: "/api/user/dl/call-comprehensions"
            Method: get
            RestApiId:
              Ref: "OpsApi"

  UserApiRetrieveDlCallSentimentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: "src/"
      Handler: "user_api_retrieve_dl_call_sentiments.lambda_handler"
      Environment:
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref "DataLakeConsumableDataBucketName"
      Events:
        UserApiRetrieveDlCallSentimentsEvent:
          Type: Api
          Properties:
            Path: "/api/user/dl/call-sentiments"
            Method: get
            RestApiId:
              Ref: "OpsApi"

# ---------------------------------------------------------------------------------------------------------------------
# Outputs.
# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------
