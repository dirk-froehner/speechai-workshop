AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS Speech AI Workshop for Utilities / Business Services / Call Comprehension Service.
  This service uses Amazon Comprehend to distill insights out of call transcripts.

# ---------------------------------------------------------------------------------------------------------------------
# Parameters.
# ---------------------------------------------------------------------------------------------------------------------

Parameters:

  # Standard parameters that should go into every service.

  Stage:
    Description: "Environment stage (dev, test, ..., prod)"
    Type: "String"
  Workload:
    Description: "Short name of the overall workload this service belongs to"
    Type: "String"
  Context:
    Description: "Short name of the context for this service (e.g. backoffice services versus business services)"
    Type: "String"
  Service:
    Description: "Short name of this service"
    Type: "String"
  WorkloadLongName:
    Description: "Long name of the overall workload this service belongs to"
    Type: "String"
  ContextLongName:
    Description: "Long name of the context for this service (e.g. backoffice services versus business services)"
    Type: "String"
  ServiceLongName:
    Description: "Long name of this service"
    Type: "String"
  LogLevel:
    Description: "Log level for Lambda functions"
    Type: "String"
    Default: "DEBUG"
  LogRetentionInDays:
    Description: "CloudWatch Logs retention period"
    Type: "Number"
    Default: 7

  # Parameters specific to this service.

  CreateInsightsFunctionName:
    Type: "String"
    Default: "create-insights"

  # Parameters from AWS SSM Parameter Store for shared resources.

  DataLakeDataBucketArn:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "ARN of the shared DataLakeDataBucket"
    Default: "/dev/eecc/s3/dl-data/arn"
  DataLakeDataBucketName:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "Name of the shared DataLakeDataBucket"
    Default: "/dev/eecc/s3/dl-data/name"

  AthenaBucketArn:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "ARN of the shared AthenaBucket"
    Default: "/dev/eecc/s3/athena-data/arn"
  AthenaBucketName:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "Name of the shared AthenaBucket"
    Default: "/dev/eecc/s3/athena-data/name"


# ---------------------------------------------------------------------------------------------------------------------
# Mappings.
# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------
# Globals.
# ---------------------------------------------------------------------------------------------------------------------

Globals:

  # Globals for serverless functions.

  Function:
    Runtime: "python3.12"
    Timeout: 5
    Tracing: "Active"
    MemorySize: 512
    Environment:
      Variables:
        STAGE:              !Ref "Stage"
        WORKLOAD:           !Ref "Workload"
        CONTEXT:            !Ref "Context"
        SERVICE:            !Ref "Service"
        WORKLOAD_LONG_NAME: !Ref "WorkloadLongName"
        CONTEXT_LONG_NAME:  !Ref "ContextLongName"
        SERVICE_LONG_NAME:  !Ref "ServiceLongName"
        LOG_LEVEL:          !Ref "LogLevel"
        DATA_LAKE_DATA_BUCKET_ARN:  !Ref DataLakeDataBucketArn
        DATA_LAKE_DATA_BUCKET_NAME: !Ref DataLakeDataBucketName
    # Tags coming in from sam deploy command.

# ---------------------------------------------------------------------------------------------------------------------
# Resources.
# ---------------------------------------------------------------------------------------------------------------------

Resources:

  # -------------------------------------------------------------------------------------------------------------------
  # Lambda functions + roles + log groups for processing "new datalake prepared data" events from Amazon SNS.
  # -------------------------------------------------------------------------------------------------------------------

  CreateInsightsFunctionRole:
    Description: "Execution role for CreateInsightsFunction"
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::Region}-${Stage}-${Workload}-${Service}-${CreateInsightsFunctionName}Role"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: "Allow"
          Principal:
            Service: ["lambda.amazonaws.com"]
          Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonS3FullAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/ComprehendFullAccess"

  CreateInsightsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-${Workload}-${Service}-${CreateInsightsFunctionName}"
      CodeUri: "src/"
      Handler: "create_insights.lambda_handler"
      Role: !GetAtt "CreateInsightsFunctionRole.Arn"
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - "aws.s3"
              detail-type:
                - "Object Created"
              resources:
                - !Ref DataLakeDataBucketArn
              detail:
                object:
                  key:
                    - "prefix": "contact-center/amazon-transcribe/call-analytics/consumable/"

  CreateInsightsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CreateInsightsFunction}"
      RetentionInDays: !Ref "LogRetentionInDays"
      # Tags are not supported for AWS::Logs::LogGroup.

  # -------------------------------------------------------------------------------------------------------------------
  # Glue: Database + Crawler
  # -------------------------------------------------------------------------------------------------------------------

  CreateGlueCrawlerRole:
    Description: "Execution role for SentimentAnalysisCrawler"
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::Region}-${Stage}-${Workload}-${Service}-SentimentAnalysisCrawlerRole"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: "Allow"
          Principal:
            Service: ["glue.amazonaws.com"]
          Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonS3FullAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSGlueServiceRole"

  # -------------------------------------------------------------------------------------------------------------------
  # Athena Workgroup
  # -------------------------------------------------------------------------------------------------------------------

  CreateAthenaWorkgroup:
    Type: AWS::Athena::WorkGroup
    Properties: 
      Description: Workgroup for Athena
      Name: analysis-workgroup
      State: ENABLED
      WorkGroupConfiguration: 
        ResultConfiguration: 
          OutputLocation: !Sub "s3://${AthenaBucketName}"

# ---------------------------------------------------------------------------------------------------------------------
# Outputs.
# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------
